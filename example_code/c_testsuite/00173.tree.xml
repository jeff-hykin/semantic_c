<translation_unit>
    <preproc_include>
        <#include text="#include" />
        <system_lib_string text="<stdio.h>" />
    </preproc_include>
    <function_definition>
        <primitive_type text="int" />
        <function_declarator>
            <identifier text="main" />
            <parameter_list>
                <"(" text="(" />
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <declaration>
                <primitive_type text="int" />
                <init_declarator>
                    <identifier text="x" />
                    <"=" text="=" />
                    <char_literal>
                        <"'" text="'" />
                        <character text="a" />
                        <"'" text="'" />
                    </char_literal>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <primitive_type text="char" />
                <init_declarator>
                    <identifier text="y" />
                    <"=" text="=" />
                    <identifier text="x" />
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <primitive_type text="char" />
                <init_declarator>
                    <pointer_declarator>
                        <"*" text="*" />
                        <identifier text="a" />
                    </pointer_declarator>
                    <"=" text="=" />
                    <string_literal>
                        <"\"" text="\"" />
                        <string_content text="hello" />
                        <"\"" text="\"" />
                    </string_literal>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="a" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <declaration>
                <primitive_type text="int" />
                <identifier text="c" />
                <";" text=";" />
            </declaration>
            <expression_statement>
                <assignment_expression>
                    <identifier text="c" />
                    <"=" text="=" />
                    <pointer_expression>
                        <"*" text="*" />
                        <identifier text="a" />
                    </pointer_expression>
                </assignment_expression>
                <";" text=";" />
            </expression_statement>
            <declaration>
                <primitive_type text="char" />
                <pointer_declarator>
                    <"*" text="*" />
                    <identifier text="b" />
                </pointer_declarator>
                <";" text=";" />
            </declaration>
            <for_statement>
                <for text="for" />
                <"(" text="(" />
                <assignment_expression>
                    <identifier text="b" />
                    <"=" text="=" />
                    <identifier text="a" />
                </assignment_expression>
                <";" text=";" />
                <binary_expression>
                    <pointer_expression>
                        <"*" text="*" />
                        <identifier text="b" />
                    </pointer_expression>
                    <"!=" text="!=" />
                    <number_literal text="0" />
                </binary_expression>
                <";" text=";" />
                <update_expression>
                    <identifier text="b" />
                    <"++" text="++" />
                </update_expression>
                <")" text=")" />
                <expression_statement>
                    <call_expression>
                        <identifier text="printf" />
                        <argument_list>
                            <"(" text="(" />
                            <string_literal>
                                <"\"" text="\"" />
                                <string_content text="%c: %d" />
                                <escape_sequence text="\\n" />
                                <"\"" text="\"" />
                            </string_literal>
                            <"," text="," />
                            <pointer_expression>
                                <"*" text="*" />
                                <identifier text="b" />
                            </pointer_expression>
                            <"," text="," />
                            <pointer_expression>
                                <"*" text="*" />
                                <identifier text="b" />
                            </pointer_expression>
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                    <";" text=";" />
                </expression_statement>
            </for_statement>
            <declaration>
                <primitive_type text="char" />
                <array_declarator>
                    <identifier text="destarray" />
                    <"[" text="[" />
                    <number_literal text="10" />
                    <"]" text="]" />
                </array_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <primitive_type text="char" />
                <init_declarator>
                    <pointer_declarator>
                        <"*" text="*" />
                        <identifier text="dest" />
                    </pointer_declarator>
                    <"=" text="=" />
                    <pointer_expression>
                        <"&" text="&" />
                        <subscript_expression>
                            <identifier text="destarray" />
                            <"[" text="[" />
                            <number_literal text="0" />
                            <"]" text="]" />
                        </subscript_expression>
                    </pointer_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <primitive_type text="char" />
                <init_declarator>
                    <pointer_declarator>
                        <"*" text="*" />
                        <identifier text="src" />
                    </pointer_declarator>
                    <"=" text="=" />
                    <identifier text="a" />
                </init_declarator>
                <";" text=";" />
            </declaration>
            <while_statement>
                <while text="while" />
                <parenthesized_expression>
                    <"(" text="(" />
                    <binary_expression>
                        <pointer_expression>
                            <"*" text="*" />
                            <identifier text="src" />
                        </pointer_expression>
                        <"!=" text="!=" />
                        <number_literal text="0" />
                    </binary_expression>
                    <")" text=")" />
                </parenthesized_expression>
                <expression_statement>
                    <assignment_expression>
                        <pointer_expression>
                            <"*" text="*" />
                            <update_expression>
                                <identifier text="dest" />
                                <"++" text="++" />
                            </update_expression>
                        </pointer_expression>
                        <"=" text="=" />
                        <pointer_expression>
                            <"*" text="*" />
                            <update_expression>
                                <identifier text="src" />
                                <"++" text="++" />
                            </update_expression>
                        </pointer_expression>
                    </assignment_expression>
                    <";" text=";" />
                </expression_statement>
            </while_statement>
            <expression_statement>
                <assignment_expression>
                    <pointer_expression>
                        <"*" text="*" />
                        <identifier text="dest" />
                    </pointer_expression>
                    <"=" text="=" />
                    <number_literal text="0" />
                </assignment_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="copied string is %s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="destarray" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <return_statement>
                <return text="return" />
                <number_literal text="0" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <comment text="/* vim: set expandtab ts=4 sw=3 sts=3 tw=80 :*/" />
</translation_unit>
