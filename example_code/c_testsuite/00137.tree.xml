<translation_unit>
    <preproc_function_def>
        <#define text="#define" />
        <identifier text="x" />
        <preproc_params>
            <"(" text="(" />
            <identifier text="y" />
            <")" text=")" />
        </preproc_params>
        <preproc_arg text="#y" />
    </preproc_function_def>
    <function_definition>
        <primitive_type text="int" />
        <function_declarator>
            <identifier text="main" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <declaration>
                <primitive_type text="char" />
                <pointer_declarator>
                    <"*" text="*" />
                    <identifier text="p" />
                </pointer_declarator>
                <";" text=";" />
            </declaration>
            <expression_statement>
                <assignment_expression>
                    <identifier text="p" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="x" />
                        <argument_list>
                            <"(" text="(" />
                            <identifier text="hello" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </assignment_expression>
                <";" text="" />
            </expression_statement>
            <expression_statement>
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text=" is better than bye" />
                    <"\"" text="\"" />
                </string_literal>
                <";" text=";" />
            </expression_statement>
            <return_statement>
                <return text="return" />
                <conditional_expression>
                    <parenthesized_expression>
                        <"(" text="(" />
                        <binary_expression>
                            <pointer_expression>
                                <"*" text="*" />
                                <identifier text="p" />
                            </pointer_expression>
                            <"==" text="==" />
                            <char_literal>
                                <"'" text="'" />
                                <character text="h" />
                                <"'" text="'" />
                            </char_literal>
                        </binary_expression>
                        <")" text=")" />
                    </parenthesized_expression>
                    <"?" text="?" />
                    <number_literal text="0" />
                    <":" text=":" />
                    <number_literal text="1" />
                </conditional_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
</translation_unit>
