<translation_unit>
    <comment text="/*\n * f(2) will expand to 2*g, which will expand to 2*f, and in this\n * moment f will not be expanded because the macro definition is\n * a function alike macro, and in this case there is no arguments.\n */" />
    <preproc_function_def>
        <#define text="#define" />
        <identifier text="f" />
        <preproc_params>
            <"(" text="(" />
            <identifier text="a" />
            <")" text=")" />
        </preproc_params>
        <preproc_arg text="a*g" />
    </preproc_function_def>
    <preproc_def>
        <#define text="#define" />
        <identifier text="g" />
        <preproc_arg text="f" />
    </preproc_def>
    <function_definition>
        <primitive_type text="int" />
        <function_declarator>
            <identifier text="main" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <declaration>
                <primitive_type text="int" />
                <init_declarator>
                    <identifier text="f" />
                    <"=" text="=" />
                    <number_literal text="0" />
                </init_declarator>
                <";" text=";" />
            </declaration>
            <return_statement>
                <return text="return" />
                <call_expression>
                    <identifier text="f" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="2" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
</translation_unit>
