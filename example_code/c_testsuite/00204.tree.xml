<translation_unit>
    <comment text="// This program is designed to test some arm64-specific things, such as the" />
    <comment text="// calling convention, but should give the same results on any architecture." />
    <preproc_include>
        <#include text="#include" />
        <system_lib_string text="<stdarg.h>" />
    </preproc_include>
    <preproc_include>
        <#include text="#include" />
        <system_lib_string text="<stdint.h>" />
    </preproc_include>
    <preproc_include>
        <#include text="#include" />
        <system_lib_string text="<stdio.h>" />
    </preproc_include>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s1" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="1" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s1" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="0" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s2" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="2" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s2" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="12" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s3" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="3" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s3" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="345" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s4" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="4" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s4" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="6789" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s5" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="5" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s5" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="abcde" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s6" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="6" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s6" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="fghijk" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s7" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="7" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s7" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="lmnopqr" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s8" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="8" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s8" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="stuvwxyz" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s9" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="9" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s9" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="ABCDEFGHI" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s10" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="10" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s10" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="JKLMNOPQRS" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s11" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="11" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s11" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="TUVWXYZ0123" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s12" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="12" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s12" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="456789abcdef" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s13" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="13" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s13" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="ghijklmnopqrs" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s14" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="14" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s14" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="tuvwxyzABCDEFG" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s15" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="15" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s15" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="HIJKLMNOPQRSTUV" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s16" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="16" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s16" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="WXYZ0123456789ab" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s17" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="char" />
                    <array_declarator>
                        <field_identifier text="x" />
                        <"[" text="[" />
                        <number_literal text="17" />
                        <"]" text="]" />
                    </array_declarator>
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="s17" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <string_literal>
                    <"\"" text="\"" />
                    <string_content text="cdefghijklmnopqrs" />
                    <"\"" text="\"" />
                </string_literal>
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa11" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="float" />
                    <field_identifier text="a" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa11" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="11.1" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa12" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="float" />
                    <field_identifier text="a" />
                    <"," text="," />
                    <field_identifier text="b" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa12" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="12.1" />
                <"," text="," />
                <number_literal text="12.2" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa13" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="float" />
                    <field_identifier text="a" />
                    <"," text="," />
                    <field_identifier text="b" />
                    <"," text="," />
                    <field_identifier text="c" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa13" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="13.1" />
                <"," text="," />
                <number_literal text="13.2" />
                <"," text="," />
                <number_literal text="13.3" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa14" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="float" />
                    <field_identifier text="a" />
                    <"," text="," />
                    <field_identifier text="b" />
                    <"," text="," />
                    <field_identifier text="c" />
                    <"," text="," />
                    <field_identifier text="d" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa14" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="14.1" />
                <"," text="," />
                <number_literal text="14.2" />
                <"," text="," />
                <number_literal text="14.3" />
                <"," text="," />
                <number_literal text="14.4" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa21" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="double" />
                    <field_identifier text="a" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa21" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="21.1" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa22" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="double" />
                    <field_identifier text="a" />
                    <"," text="," />
                    <field_identifier text="b" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa22" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="22.1" />
                <"," text="," />
                <number_literal text="22.2" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa23" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="double" />
                    <field_identifier text="a" />
                    <"," text="," />
                    <field_identifier text="b" />
                    <"," text="," />
                    <field_identifier text="c" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa23" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="23.1" />
                <"," text="," />
                <number_literal text="23.2" />
                <"," text="," />
                <number_literal text="23.3" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa24" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <primitive_type text="double" />
                    <field_identifier text="a" />
                    <"," text="," />
                    <field_identifier text="b" />
                    <"," text="," />
                    <field_identifier text="c" />
                    <"," text="," />
                    <field_identifier text="d" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa24" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="24.1" />
                <"," text="," />
                <number_literal text="24.2" />
                <"," text="," />
                <number_literal text="24.3" />
                <"," text="," />
                <number_literal text="24.4" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa31" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <sized_type_specifier>
                        <long text="long" />
                        <primitive_type text="double" />
                    </sized_type_specifier>
                    <field_identifier text="a" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa31" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="31.1" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa32" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <sized_type_specifier>
                        <long text="long" />
                        <primitive_type text="double" />
                    </sized_type_specifier>
                    <field_identifier text="a" />
                    <"," text="," />
                    <field_identifier text="b" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa32" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="32.1" />
                <"," text="," />
                <number_literal text="32.2" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa33" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <sized_type_specifier>
                        <long text="long" />
                        <primitive_type text="double" />
                    </sized_type_specifier>
                    <field_identifier text="a" />
                    <"," text="," />
                    <field_identifier text="b" />
                    <"," text="," />
                    <field_identifier text="c" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa33" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="33.1" />
                <"," text="," />
                <number_literal text="33.2" />
                <"," text="," />
                <number_literal text="33.3" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <declaration>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa34" />
            <field_declaration_list>
                <"{" text="{" />
                <field_declaration>
                    <sized_type_specifier>
                        <long text="long" />
                        <primitive_type text="double" />
                    </sized_type_specifier>
                    <field_identifier text="a" />
                    <"," text="," />
                    <field_identifier text="b" />
                    <"," text="," />
                    <field_identifier text="c" />
                    <"," text="," />
                    <field_identifier text="d" />
                    <";" text=";" />
                </field_declaration>
                <"}" text="}" />
            </field_declaration_list>
        </struct_specifier>
        <init_declarator>
            <identifier text="hfa34" />
            <"=" text="=" />
            <initializer_list>
                <"{" text="{" />
                <number_literal text="34.1" />
                <"," text="," />
                <number_literal text="34.2" />
                <"," text="," />
                <number_literal text="34.3" />
                <"," text="," />
                <number_literal text="34.4" />
                <"}" text="}" />
            </initializer_list>
        </init_declarator>
        <";" text=";" />
    </declaration>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s1" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s2" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s2" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.2s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s3" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s3" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.3s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s4" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s4" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.4s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s5" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s5" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.5s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s6" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s6" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.6s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s7" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s7" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.7s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s8" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s8" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.8s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s9" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s9" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.9s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s10" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s10" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.10s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s11" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s11" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.11s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s12" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s12" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.12s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s13" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s13" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.13s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s14" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s14" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.14s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s15" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s15" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.15s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s16" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s16" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.16s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_s17" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s17" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.17s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa11" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa11" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa12" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa12" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa13" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa13" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa14" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa14" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f %.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa21" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa21" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa22" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa22" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa23" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa23" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa24" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa24" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f %.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa31" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa31" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa32" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa32" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1Lf %.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa33" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa33" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1Lf %.1Lf %.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa_hfa34" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa34" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1Lf %.1Lf %.1Lf %.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s8" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s9" />
                    </struct_specifier>
                    <identifier text="b" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s10" />
                    </struct_specifier>
                    <identifier text="c" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s11" />
                    </struct_specifier>
                    <identifier text="d" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s12" />
                    </struct_specifier>
                    <identifier text="e" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s13" />
                    </struct_specifier>
                    <identifier text="f" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.3s %.3s %.3s %.3s %.3s %.3s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="b" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="c" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="d" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="e" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="f" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa2" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s9" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s10" />
                    </struct_specifier>
                    <identifier text="b" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s11" />
                    </struct_specifier>
                    <identifier text="c" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s12" />
                    </struct_specifier>
                    <identifier text="d" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s13" />
                    </struct_specifier>
                    <identifier text="e" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s14" />
                    </struct_specifier>
                    <identifier text="f" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.3s %.3s %.3s %.3s %.3s %.3s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="b" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="c" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="d" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="e" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="f" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa3" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa14" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa23" />
                    </struct_specifier>
                    <identifier text="b" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa32" />
                    </struct_specifier>
                    <identifier text="c" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f %.1f %.1f %.1Lf %.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="b" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="b" />
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="c" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="c" />
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="fa4" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s1" />
                    </struct_specifier>
                    <identifier text="a" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa14" />
                    </struct_specifier>
                    <identifier text="b" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s2" />
                    </struct_specifier>
                    <identifier text="c" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa24" />
                    </struct_specifier>
                    <identifier text="d" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="s3" />
                    </struct_specifier>
                    <identifier text="e" />
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <struct_specifier>
                        <struct text="struct" />
                        <type_identifier text="hfa34" />
                    </struct_specifier>
                    <identifier text="f" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1s %.1f %.1f %.2s %.1f %.1f %.3s %.1Lf %.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="a" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="b" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="b" />
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="c" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="d" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="d" />
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="e" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="f" />
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <identifier text="f" />
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="arg" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="Arguments:" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s1" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s1" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s2" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s2" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s3" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s3" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s4" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s4" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s5" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s5" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s6" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s6" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s7" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s7" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s8" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s8" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s9" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s9" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s10" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s10" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s11" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s11" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s12" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s12" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s13" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s13" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s14" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s14" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s15" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s15" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s16" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s16" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_s17" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s17" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa11" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa11" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa12" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa12" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa13" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa13" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa14" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa14" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa21" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa21" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa22" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa22" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa23" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa23" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa24" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa24" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa31" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa31" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa32" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa32" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa33" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa33" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa_hfa34" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa34" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa1" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s8" />
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s10" />
                        <"," text="," />
                        <identifier text="s11" />
                        <"," text="," />
                        <identifier text="s12" />
                        <"," text="," />
                        <identifier text="s13" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa2" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s10" />
                        <"," text="," />
                        <identifier text="s11" />
                        <"," text="," />
                        <identifier text="s12" />
                        <"," text="," />
                        <identifier text="s13" />
                        <"," text="," />
                        <identifier text="s14" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa3" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="fa4" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="s1" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="s2" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="s3" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s1" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s1" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s2" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s2" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s2" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s3" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s3" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s3" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s4" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s4" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s4" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s5" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s5" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s5" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s6" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s6" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s6" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s7" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s7" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s7" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s8" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s8" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s8" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s9" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s9" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s9" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s10" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s10" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s10" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s11" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s11" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s11" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s12" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s12" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s12" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s13" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s13" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s13" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s14" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s14" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s14" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s15" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s15" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s15" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s16" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s16" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s16" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="s17" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_s17" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="s17" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa11" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa11" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa11" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa12" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa12" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa12" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa13" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa13" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa13" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa14" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa14" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa14" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa21" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa21" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa21" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa22" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa22" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa22" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa23" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa23" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa23" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa24" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa24" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa24" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa31" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa31" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa31" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa32" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa32" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa32" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa33" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa33" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa33" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <struct_specifier>
            <struct text="struct" />
            <type_identifier text="hfa34" />
        </struct_specifier>
        <function_declarator>
            <identifier text="fr_hfa34" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <identifier text="hfa34" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="ret" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s1" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t1" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s1" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s2" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t2" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s2" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s3" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t3" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s3" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s4" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t4" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s4" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s5" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t5" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s5" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s6" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t6" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s6" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s7" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t7" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s7" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s8" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t8" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s8" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s9" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t9" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s9" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s10" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t10" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s10" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s11" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t11" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s11" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s12" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t12" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s12" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s13" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t13" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s13" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s14" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t14" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s14" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s15" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t15" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s15" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s16" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t16" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s16" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <struct_specifier>
                    <struct text="struct" />
                    <type_identifier text="s17" />
                </struct_specifier>
                <init_declarator>
                    <identifier text="t17" />
                    <"=" text="=" />
                    <call_expression>
                        <identifier text="fr_s17" />
                        <argument_list>
                            <"(" text="(" />
                            <")" text=")" />
                        </argument_list>
                    </call_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="Return values:" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t1" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.2s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t2" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.3s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t3" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.4s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t4" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.5s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t5" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.6s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t6" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.7s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t7" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.8s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t8" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.9s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t9" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.10s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t10" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.11s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t11" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.12s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t12" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.13s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t13" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.14s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t14" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.15s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t15" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.16s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t16" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.17s" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <identifier text="t17" />
                            <"." text="." />
                            <field_identifier text="x" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa11" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa12" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa12" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa13" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa13" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa14" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa14" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa21" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa22" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa22" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa23" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa23" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1f %.1f" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa24" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa24" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa31" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1Lf %.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa32" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa32" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="b" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1Lf %.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa33" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa33" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="c" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%.1Lf %.1Lf" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa34" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="a" />
                        </field_expression>
                        <"," text="," />
                        <field_expression>
                            <call_expression>
                                <identifier text="fr_hfa34" />
                                <argument_list>
                                    <"(" text="(" />
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <"." text="." />
                            <field_identifier text="d" />
                        </field_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="int" />
        <function_declarator>
            <identifier text="match" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <type_qualifier>
                        <const text="const" />
                    </type_qualifier>
                    <primitive_type text="char" />
                    <pointer_declarator>
                        <"*" text="*" />
                        <pointer_declarator>
                            <"*" text="*" />
                            <identifier text="s" />
                        </pointer_declarator>
                    </pointer_declarator>
                </parameter_declaration>
                <"," text="," />
                <parameter_declaration>
                    <type_qualifier>
                        <const text="const" />
                    </type_qualifier>
                    <primitive_type text="char" />
                    <pointer_declarator>
                        <"*" text="*" />
                        <identifier text="f" />
                    </pointer_declarator>
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <declaration>
                <type_qualifier>
                    <const text="const" />
                </type_qualifier>
                <primitive_type text="char" />
                <init_declarator>
                    <pointer_declarator>
                        <"*" text="*" />
                        <identifier text="p" />
                    </pointer_declarator>
                    <"=" text="=" />
                    <pointer_expression>
                        <"*" text="*" />
                        <identifier text="s" />
                    </pointer_expression>
                </init_declarator>
                <";" text=";" />
            </declaration>
            <for_statement>
                <for text="for" />
                <"(" text="(" />
                <assignment_expression>
                    <identifier text="p" />
                    <"=" text="=" />
                    <pointer_expression>
                        <"*" text="*" />
                        <identifier text="s" />
                    </pointer_expression>
                </assignment_expression>
                <";" text=";" />
                <binary_expression>
                    <pointer_expression>
                        <"*" text="*" />
                        <identifier text="f" />
                    </pointer_expression>
                    <"&&" text="&&" />
                    <binary_expression>
                        <pointer_expression>
                            <"*" text="*" />
                            <identifier text="f" />
                        </pointer_expression>
                        <"==" text="==" />
                        <pointer_expression>
                            <"*" text="*" />
                            <identifier text="p" />
                        </pointer_expression>
                    </binary_expression>
                </binary_expression>
                <";" text=";" />
                <comma_expression>
                    <update_expression>
                        <identifier text="f" />
                        <"++" text="++" />
                    </update_expression>
                    <"," text="," />
                    <update_expression>
                        <identifier text="p" />
                        <"++" text="++" />
                    </update_expression>
                </comma_expression>
                <")" text=")" />
                <expression_statement>
                    <";" text=";" />
                </expression_statement>
            </for_statement>
            <if_statement>
                <if text="if" />
                <parenthesized_expression>
                    <"(" text="(" />
                    <unary_expression>
                        <"!" text="!" />
                        <pointer_expression>
                            <"*" text="*" />
                            <identifier text="f" />
                        </pointer_expression>
                    </unary_expression>
                    <")" text=")" />
                </parenthesized_expression>
                <compound_statement>
                    <"{" text="{" />
                    <expression_statement>
                        <assignment_expression>
                            <pointer_expression>
                                <"*" text="*" />
                                <identifier text="s" />
                            </pointer_expression>
                            <"=" text="=" />
                            <binary_expression>
                                <identifier text="p" />
                                <"-" text="-" />
                                <number_literal text="1" />
                            </binary_expression>
                        </assignment_expression>
                        <";" text=";" />
                    </expression_statement>
                    <return_statement>
                        <return text="return" />
                        <number_literal text="1" />
                        <";" text=";" />
                    </return_statement>
                    <"}" text="}" />
                </compound_statement>
            </if_statement>
            <return_statement>
                <return text="return" />
                <number_literal text="0" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="myprintf" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <type_qualifier>
                        <const text="const" />
                    </type_qualifier>
                    <primitive_type text="char" />
                    <pointer_declarator>
                        <"*" text="*" />
                        <identifier text="format" />
                    </pointer_declarator>
                </parameter_declaration>
                <"," text="," />
                <variadic_parameter>
                    <"..." text="..." />
                </variadic_parameter>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <declaration>
                <type_qualifier>
                    <const text="const" />
                </type_qualifier>
                <primitive_type text="char" />
                <pointer_declarator>
                    <"*" text="*" />
                    <identifier text="s" />
                </pointer_declarator>
                <";" text=";" />
            </declaration>
            <declaration>
                <type_identifier text="va_list" />
                <identifier text="ap" />
                <";" text=";" />
            </declaration>
            <expression_statement>
                <call_expression>
                    <identifier text="va_start" />
                    <argument_list>
                        <"(" text="(" />
                        <identifier text="ap" />
                        <"," text="," />
                        <identifier text="format" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <for_statement>
                <for text="for" />
                <"(" text="(" />
                <assignment_expression>
                    <identifier text="s" />
                    <"=" text="=" />
                    <identifier text="format" />
                </assignment_expression>
                <";" text=";" />
                <pointer_expression>
                    <"*" text="*" />
                    <identifier text="s" />
                </pointer_expression>
                <";" text=";" />
                <update_expression>
                    <identifier text="s" />
                    <"++" text="++" />
                </update_expression>
                <")" text=")" />
                <compound_statement>
                    <"{" text="{" />
                    <if_statement>
                        <if text="if" />
                        <parenthesized_expression>
                            <"(" text="(" />
                            <call_expression>
                                <identifier text="match" />
                                <argument_list>
                                    <"(" text="(" />
                                    <pointer_expression>
                                        <"&" text="&" />
                                        <identifier text="s" />
                                    </pointer_expression>
                                    <"," text="," />
                                    <string_literal>
                                        <"\"" text="\"" />
                                        <string_content text="%7s" />
                                        <"\"" text="\"" />
                                    </string_literal>
                                    <")" text=")" />
                                </argument_list>
                            </call_expression>
                            <")" text=")" />
                        </parenthesized_expression>
                        <compound_statement>
                            <"{" text="{" />
                            <declaration>
                                <struct_specifier>
                                    <struct text="struct" />
                                    <type_identifier text="s7" />
                                </struct_specifier>
                                <init_declarator>
                                    <identifier text="t7" />
                                    <"=" text="=" />
                                    <call_expression>
                                        <identifier text="va_arg" />
                                        <argument_list>
                                            <"(" text="(" />
                                            <identifier text="ap" />
                                            <"," text="," />
                                            <identifier text="struct" />
                                            <ERROR>
                                                <identifier text="s7" />
                                            </ERROR>
                                            <")" text=")" />
                                        </argument_list>
                                    </call_expression>
                                </init_declarator>
                                <";" text=";" />
                            </declaration>
                            <expression_statement>
                                <call_expression>
                                    <identifier text="printf" />
                                    <argument_list>
                                        <"(" text="(" />
                                        <string_literal>
                                            <"\"" text="\"" />
                                            <string_content text="%.7s" />
                                            <"\"" text="\"" />
                                        </string_literal>
                                        <"," text="," />
                                        <field_expression>
                                            <identifier text="t7" />
                                            <"." text="." />
                                            <field_identifier text="x" />
                                        </field_expression>
                                        <")" text=")" />
                                    </argument_list>
                                </call_expression>
                                <";" text=";" />
                            </expression_statement>
                            <"}" text="}" />
                        </compound_statement>
                        <else_clause>
                            <else text="else" />
                            <if_statement>
                                <if text="if" />
                                <parenthesized_expression>
                                    <"(" text="(" />
                                    <call_expression>
                                        <identifier text="match" />
                                        <argument_list>
                                            <"(" text="(" />
                                            <pointer_expression>
                                                <"&" text="&" />
                                                <identifier text="s" />
                                            </pointer_expression>
                                            <"," text="," />
                                            <string_literal>
                                                <"\"" text="\"" />
                                                <string_content text="%9s" />
                                                <"\"" text="\"" />
                                            </string_literal>
                                            <")" text=")" />
                                        </argument_list>
                                    </call_expression>
                                    <")" text=")" />
                                </parenthesized_expression>
                                <compound_statement>
                                    <"{" text="{" />
                                    <declaration>
                                        <struct_specifier>
                                            <struct text="struct" />
                                            <type_identifier text="s9" />
                                        </struct_specifier>
                                        <init_declarator>
                                            <identifier text="t9" />
                                            <"=" text="=" />
                                            <call_expression>
                                                <identifier text="va_arg" />
                                                <argument_list>
                                                    <"(" text="(" />
                                                    <identifier text="ap" />
                                                    <"," text="," />
                                                    <identifier text="struct" />
                                                    <ERROR>
                                                        <identifier text="s9" />
                                                    </ERROR>
                                                    <")" text=")" />
                                                </argument_list>
                                            </call_expression>
                                        </init_declarator>
                                        <";" text=";" />
                                    </declaration>
                                    <expression_statement>
                                        <call_expression>
                                            <identifier text="printf" />
                                            <argument_list>
                                                <"(" text="(" />
                                                <string_literal>
                                                    <"\"" text="\"" />
                                                    <string_content text="%.9s" />
                                                    <"\"" text="\"" />
                                                </string_literal>
                                                <"," text="," />
                                                <field_expression>
                                                    <identifier text="t9" />
                                                    <"." text="." />
                                                    <field_identifier text="x" />
                                                </field_expression>
                                                <")" text=")" />
                                            </argument_list>
                                        </call_expression>
                                        <";" text=";" />
                                    </expression_statement>
                                    <"}" text="}" />
                                </compound_statement>
                                <else_clause>
                                    <else text="else" />
                                    <if_statement>
                                        <if text="if" />
                                        <parenthesized_expression>
                                            <"(" text="(" />
                                            <call_expression>
                                                <identifier text="match" />
                                                <argument_list>
                                                    <"(" text="(" />
                                                    <pointer_expression>
                                                        <"&" text="&" />
                                                        <identifier text="s" />
                                                    </pointer_expression>
                                                    <"," text="," />
                                                    <string_literal>
                                                        <"\"" text="\"" />
                                                        <string_content text="%hfa11" />
                                                        <"\"" text="\"" />
                                                    </string_literal>
                                                    <")" text=")" />
                                                </argument_list>
                                            </call_expression>
                                            <")" text=")" />
                                        </parenthesized_expression>
                                        <compound_statement>
                                            <"{" text="{" />
                                            <declaration>
                                                <struct_specifier>
                                                    <struct text="struct" />
                                                    <type_identifier text="hfa11" />
                                                </struct_specifier>
                                                <init_declarator>
                                                    <identifier text="x" />
                                                    <"=" text="=" />
                                                    <call_expression>
                                                        <identifier text="va_arg" />
                                                        <argument_list>
                                                            <"(" text="(" />
                                                            <identifier text="ap" />
                                                            <"," text="," />
                                                            <identifier text="struct" />
                                                            <ERROR>
                                                                <identifier text="hfa11" />
                                                            </ERROR>
                                                            <")" text=")" />
                                                        </argument_list>
                                                    </call_expression>
                                                </init_declarator>
                                                <";" text=";" />
                                            </declaration>
                                            <expression_statement>
                                                <call_expression>
                                                    <identifier text="printf" />
                                                    <argument_list>
                                                        <"(" text="(" />
                                                        <string_literal>
                                                            <"\"" text="\"" />
                                                            <string_content text="%.1f,%.1f" />
                                                            <"\"" text="\"" />
                                                        </string_literal>
                                                        <"," text="," />
                                                        <field_expression>
                                                            <identifier text="x" />
                                                            <"." text="." />
                                                            <field_identifier text="a" />
                                                        </field_expression>
                                                        <"," text="," />
                                                        <field_expression>
                                                            <identifier text="x" />
                                                            <"." text="." />
                                                            <field_identifier text="a" />
                                                        </field_expression>
                                                        <")" text=")" />
                                                    </argument_list>
                                                </call_expression>
                                                <";" text=";" />
                                            </expression_statement>
                                            <"}" text="}" />
                                        </compound_statement>
                                        <else_clause>
                                            <else text="else" />
                                            <if_statement>
                                                <if text="if" />
                                                <parenthesized_expression>
                                                    <"(" text="(" />
                                                    <call_expression>
                                                        <identifier text="match" />
                                                        <argument_list>
                                                            <"(" text="(" />
                                                            <pointer_expression>
                                                                <"&" text="&" />
                                                                <identifier text="s" />
                                                            </pointer_expression>
                                                            <"," text="," />
                                                            <string_literal>
                                                                <"\"" text="\"" />
                                                                <string_content text="%hfa12" />
                                                                <"\"" text="\"" />
                                                            </string_literal>
                                                            <")" text=")" />
                                                        </argument_list>
                                                    </call_expression>
                                                    <")" text=")" />
                                                </parenthesized_expression>
                                                <compound_statement>
                                                    <"{" text="{" />
                                                    <declaration>
                                                        <struct_specifier>
                                                            <struct text="struct" />
                                                            <type_identifier text="hfa12" />
                                                        </struct_specifier>
                                                        <init_declarator>
                                                            <identifier text="x" />
                                                            <"=" text="=" />
                                                            <call_expression>
                                                                <identifier text="va_arg" />
                                                                <argument_list>
                                                                    <"(" text="(" />
                                                                    <identifier text="ap" />
                                                                    <"," text="," />
                                                                    <identifier text="struct" />
                                                                    <ERROR>
                                                                        <identifier text="hfa12" />
                                                                    </ERROR>
                                                                    <")" text=")" />
                                                                </argument_list>
                                                            </call_expression>
                                                        </init_declarator>
                                                        <";" text=";" />
                                                    </declaration>
                                                    <expression_statement>
                                                        <call_expression>
                                                            <identifier text="printf" />
                                                            <argument_list>
                                                                <"(" text="(" />
                                                                <string_literal>
                                                                    <"\"" text="\"" />
                                                                    <string_content text="%.1f,%.1f" />
                                                                    <"\"" text="\"" />
                                                                </string_literal>
                                                                <"," text="," />
                                                                <field_expression>
                                                                    <identifier text="x" />
                                                                    <"." text="." />
                                                                    <field_identifier text="a" />
                                                                </field_expression>
                                                                <"," text="," />
                                                                <field_expression>
                                                                    <identifier text="x" />
                                                                    <"." text="." />
                                                                    <field_identifier text="b" />
                                                                </field_expression>
                                                                <")" text=")" />
                                                            </argument_list>
                                                        </call_expression>
                                                        <";" text=";" />
                                                    </expression_statement>
                                                    <"}" text="}" />
                                                </compound_statement>
                                                <else_clause>
                                                    <else text="else" />
                                                    <if_statement>
                                                        <if text="if" />
                                                        <parenthesized_expression>
                                                            <"(" text="(" />
                                                            <call_expression>
                                                                <identifier text="match" />
                                                                <argument_list>
                                                                    <"(" text="(" />
                                                                    <pointer_expression>
                                                                        <"&" text="&" />
                                                                        <identifier text="s" />
                                                                    </pointer_expression>
                                                                    <"," text="," />
                                                                    <string_literal>
                                                                        <"\"" text="\"" />
                                                                        <string_content text="%hfa13" />
                                                                        <"\"" text="\"" />
                                                                    </string_literal>
                                                                    <")" text=")" />
                                                                </argument_list>
                                                            </call_expression>
                                                            <")" text=")" />
                                                        </parenthesized_expression>
                                                        <compound_statement>
                                                            <"{" text="{" />
                                                            <declaration>
                                                                <struct_specifier>
                                                                    <struct text="struct" />
                                                                    <type_identifier text="hfa13" />
                                                                </struct_specifier>
                                                                <init_declarator>
                                                                    <identifier text="x" />
                                                                    <"=" text="=" />
                                                                    <call_expression>
                                                                        <identifier text="va_arg" />
                                                                        <argument_list>
                                                                            <"(" text="(" />
                                                                            <identifier text="ap" />
                                                                            <"," text="," />
                                                                            <identifier text="struct" />
                                                                            <ERROR>
                                                                                <identifier text="hfa13" />
                                                                            </ERROR>
                                                                            <")" text=")" />
                                                                        </argument_list>
                                                                    </call_expression>
                                                                </init_declarator>
                                                                <";" text=";" />
                                                            </declaration>
                                                            <expression_statement>
                                                                <call_expression>
                                                                    <identifier text="printf" />
                                                                    <argument_list>
                                                                        <"(" text="(" />
                                                                        <string_literal>
                                                                            <"\"" text="\"" />
                                                                            <string_content text="%.1f,%.1f" />
                                                                            <"\"" text="\"" />
                                                                        </string_literal>
                                                                        <"," text="," />
                                                                        <field_expression>
                                                                            <identifier text="x" />
                                                                            <"." text="." />
                                                                            <field_identifier text="a" />
                                                                        </field_expression>
                                                                        <"," text="," />
                                                                        <field_expression>
                                                                            <identifier text="x" />
                                                                            <"." text="." />
                                                                            <field_identifier text="c" />
                                                                        </field_expression>
                                                                        <")" text=")" />
                                                                    </argument_list>
                                                                </call_expression>
                                                                <";" text=";" />
                                                            </expression_statement>
                                                            <"}" text="}" />
                                                        </compound_statement>
                                                        <else_clause>
                                                            <else text="else" />
                                                            <if_statement>
                                                                <if text="if" />
                                                                <parenthesized_expression>
                                                                    <"(" text="(" />
                                                                    <call_expression>
                                                                        <identifier text="match" />
                                                                        <argument_list>
                                                                            <"(" text="(" />
                                                                            <pointer_expression>
                                                                                <"&" text="&" />
                                                                                <identifier text="s" />
                                                                            </pointer_expression>
                                                                            <"," text="," />
                                                                            <string_literal>
                                                                                <"\"" text="\"" />
                                                                                <string_content text="%hfa14" />
                                                                                <"\"" text="\"" />
                                                                            </string_literal>
                                                                            <")" text=")" />
                                                                        </argument_list>
                                                                    </call_expression>
                                                                    <")" text=")" />
                                                                </parenthesized_expression>
                                                                <compound_statement>
                                                                    <"{" text="{" />
                                                                    <declaration>
                                                                        <struct_specifier>
                                                                            <struct text="struct" />
                                                                            <type_identifier text="hfa14" />
                                                                        </struct_specifier>
                                                                        <init_declarator>
                                                                            <identifier text="x" />
                                                                            <"=" text="=" />
                                                                            <call_expression>
                                                                                <identifier text="va_arg" />
                                                                                <argument_list>
                                                                                    <"(" text="(" />
                                                                                    <identifier text="ap" />
                                                                                    <"," text="," />
                                                                                    <identifier text="struct" />
                                                                                    <ERROR>
                                                                                        <identifier text="hfa14" />
                                                                                    </ERROR>
                                                                                    <")" text=")" />
                                                                                </argument_list>
                                                                            </call_expression>
                                                                        </init_declarator>
                                                                        <";" text=";" />
                                                                    </declaration>
                                                                    <expression_statement>
                                                                        <call_expression>
                                                                            <identifier text="printf" />
                                                                            <argument_list>
                                                                                <"(" text="(" />
                                                                                <string_literal>
                                                                                    <"\"" text="\"" />
                                                                                    <string_content text="%.1f,%.1f" />
                                                                                    <"\"" text="\"" />
                                                                                </string_literal>
                                                                                <"," text="," />
                                                                                <field_expression>
                                                                                    <identifier text="x" />
                                                                                    <"." text="." />
                                                                                    <field_identifier text="a" />
                                                                                </field_expression>
                                                                                <"," text="," />
                                                                                <field_expression>
                                                                                    <identifier text="x" />
                                                                                    <"." text="." />
                                                                                    <field_identifier text="d" />
                                                                                </field_expression>
                                                                                <")" text=")" />
                                                                            </argument_list>
                                                                        </call_expression>
                                                                        <";" text=";" />
                                                                    </expression_statement>
                                                                    <"}" text="}" />
                                                                </compound_statement>
                                                                <else_clause>
                                                                    <else text="else" />
                                                                    <if_statement>
                                                                        <if text="if" />
                                                                        <parenthesized_expression>
                                                                            <"(" text="(" />
                                                                            <call_expression>
                                                                                <identifier text="match" />
                                                                                <argument_list>
                                                                                    <"(" text="(" />
                                                                                    <pointer_expression>
                                                                                        <"&" text="&" />
                                                                                        <identifier text="s" />
                                                                                    </pointer_expression>
                                                                                    <"," text="," />
                                                                                    <string_literal>
                                                                                        <"\"" text="\"" />
                                                                                        <string_content text="%hfa21" />
                                                                                        <"\"" text="\"" />
                                                                                    </string_literal>
                                                                                    <")" text=")" />
                                                                                </argument_list>
                                                                            </call_expression>
                                                                            <")" text=")" />
                                                                        </parenthesized_expression>
                                                                        <compound_statement>
                                                                            <"{" text="{" />
                                                                            <declaration>
                                                                                <struct_specifier>
                                                                                    <struct text="struct" />
                                                                                    <type_identifier text="hfa21" />
                                                                                </struct_specifier>
                                                                                <init_declarator>
                                                                                    <identifier text="x" />
                                                                                    <"=" text="=" />
                                                                                    <call_expression>
                                                                                        <identifier text="va_arg" />
                                                                                        <argument_list>
                                                                                            <"(" text="(" />
                                                                                            <identifier text="ap" />
                                                                                            <"," text="," />
                                                                                            <identifier text="struct" />
                                                                                            <ERROR>
                                                                                                <identifier text="hfa21" />
                                                                                            </ERROR>
                                                                                            <")" text=")" />
                                                                                        </argument_list>
                                                                                    </call_expression>
                                                                                </init_declarator>
                                                                                <";" text=";" />
                                                                            </declaration>
                                                                            <expression_statement>
                                                                                <call_expression>
                                                                                    <identifier text="printf" />
                                                                                    <argument_list>
                                                                                        <"(" text="(" />
                                                                                        <string_literal>
                                                                                            <"\"" text="\"" />
                                                                                            <string_content text="%.1f,%.1f" />
                                                                                            <"\"" text="\"" />
                                                                                        </string_literal>
                                                                                        <"," text="," />
                                                                                        <field_expression>
                                                                                            <identifier text="x" />
                                                                                            <"." text="." />
                                                                                            <field_identifier text="a" />
                                                                                        </field_expression>
                                                                                        <"," text="," />
                                                                                        <field_expression>
                                                                                            <identifier text="x" />
                                                                                            <"." text="." />
                                                                                            <field_identifier text="a" />
                                                                                        </field_expression>
                                                                                        <")" text=")" />
                                                                                    </argument_list>
                                                                                </call_expression>
                                                                                <";" text=";" />
                                                                            </expression_statement>
                                                                            <"}" text="}" />
                                                                        </compound_statement>
                                                                        <else_clause>
                                                                            <else text="else" />
                                                                            <if_statement>
                                                                                <if text="if" />
                                                                                <parenthesized_expression>
                                                                                    <"(" text="(" />
                                                                                    <call_expression>
                                                                                        <identifier text="match" />
                                                                                        <argument_list>
                                                                                            <"(" text="(" />
                                                                                            <pointer_expression>
                                                                                                <"&" text="&" />
                                                                                                <identifier text="s" />
                                                                                            </pointer_expression>
                                                                                            <"," text="," />
                                                                                            <string_literal>
                                                                                                <"\"" text="\"" />
                                                                                                <string_content text="%hfa22" />
                                                                                                <"\"" text="\"" />
                                                                                            </string_literal>
                                                                                            <")" text=")" />
                                                                                        </argument_list>
                                                                                    </call_expression>
                                                                                    <")" text=")" />
                                                                                </parenthesized_expression>
                                                                                <compound_statement>
                                                                                    <"{" text="{" />
                                                                                    <declaration>
                                                                                        <struct_specifier>
                                                                                            <struct text="struct" />
                                                                                            <type_identifier text="hfa22" />
                                                                                        </struct_specifier>
                                                                                        <init_declarator>
                                                                                            <identifier text="x" />
                                                                                            <"=" text="=" />
                                                                                            <call_expression>
                                                                                                <identifier text="va_arg" />
                                                                                                <argument_list>
                                                                                                    <"(" text="(" />
                                                                                                    <identifier text="ap" />
                                                                                                    <"," text="," />
                                                                                                    <identifier text="struct" />
                                                                                                    <ERROR>
                                                                                                        <identifier text="hfa22" />
                                                                                                    </ERROR>
                                                                                                    <")" text=")" />
                                                                                                </argument_list>
                                                                                            </call_expression>
                                                                                        </init_declarator>
                                                                                        <";" text=";" />
                                                                                    </declaration>
                                                                                    <expression_statement>
                                                                                        <call_expression>
                                                                                            <identifier text="printf" />
                                                                                            <argument_list>
                                                                                                <"(" text="(" />
                                                                                                <string_literal>
                                                                                                    <"\"" text="\"" />
                                                                                                    <string_content text="%.1f,%.1f" />
                                                                                                    <"\"" text="\"" />
                                                                                                </string_literal>
                                                                                                <"," text="," />
                                                                                                <field_expression>
                                                                                                    <identifier text="x" />
                                                                                                    <"." text="." />
                                                                                                    <field_identifier text="a" />
                                                                                                </field_expression>
                                                                                                <"," text="," />
                                                                                                <field_expression>
                                                                                                    <identifier text="x" />
                                                                                                    <"." text="." />
                                                                                                    <field_identifier text="b" />
                                                                                                </field_expression>
                                                                                                <")" text=")" />
                                                                                            </argument_list>
                                                                                        </call_expression>
                                                                                        <";" text=";" />
                                                                                    </expression_statement>
                                                                                    <"}" text="}" />
                                                                                </compound_statement>
                                                                                <else_clause>
                                                                                    <else text="else" />
                                                                                    <if_statement>
                                                                                        <if text="if" />
                                                                                        <parenthesized_expression>
                                                                                            <"(" text="(" />
                                                                                            <call_expression>
                                                                                                <identifier text="match" />
                                                                                                <argument_list>
                                                                                                    <"(" text="(" />
                                                                                                    <pointer_expression>
                                                                                                        <"&" text="&" />
                                                                                                        <identifier text="s" />
                                                                                                    </pointer_expression>
                                                                                                    <"," text="," />
                                                                                                    <string_literal>
                                                                                                        <"\"" text="\"" />
                                                                                                        <string_content text="%hfa23" />
                                                                                                        <"\"" text="\"" />
                                                                                                    </string_literal>
                                                                                                    <")" text=")" />
                                                                                                </argument_list>
                                                                                            </call_expression>
                                                                                            <")" text=")" />
                                                                                        </parenthesized_expression>
                                                                                        <compound_statement>
                                                                                            <"{" text="{" />
                                                                                            <declaration>
                                                                                                <struct_specifier>
                                                                                                    <struct text="struct" />
                                                                                                    <type_identifier text="hfa23" />
                                                                                                </struct_specifier>
                                                                                                <init_declarator>
                                                                                                    <identifier text="x" />
                                                                                                    <"=" text="=" />
                                                                                                    <call_expression>
                                                                                                        <identifier text="va_arg" />
                                                                                                        <argument_list>
                                                                                                            <"(" text="(" />
                                                                                                            <identifier text="ap" />
                                                                                                            <"," text="," />
                                                                                                            <identifier text="struct" />
                                                                                                            <ERROR>
                                                                                                                <identifier text="hfa23" />
                                                                                                            </ERROR>
                                                                                                            <")" text=")" />
                                                                                                        </argument_list>
                                                                                                    </call_expression>
                                                                                                </init_declarator>
                                                                                                <";" text=";" />
                                                                                            </declaration>
                                                                                            <expression_statement>
                                                                                                <call_expression>
                                                                                                    <identifier text="printf" />
                                                                                                    <argument_list>
                                                                                                        <"(" text="(" />
                                                                                                        <string_literal>
                                                                                                            <"\"" text="\"" />
                                                                                                            <string_content text="%.1f,%.1f" />
                                                                                                            <"\"" text="\"" />
                                                                                                        </string_literal>
                                                                                                        <"," text="," />
                                                                                                        <field_expression>
                                                                                                            <identifier text="x" />
                                                                                                            <"." text="." />
                                                                                                            <field_identifier text="a" />
                                                                                                        </field_expression>
                                                                                                        <"," text="," />
                                                                                                        <field_expression>
                                                                                                            <identifier text="x" />
                                                                                                            <"." text="." />
                                                                                                            <field_identifier text="c" />
                                                                                                        </field_expression>
                                                                                                        <")" text=")" />
                                                                                                    </argument_list>
                                                                                                </call_expression>
                                                                                                <";" text=";" />
                                                                                            </expression_statement>
                                                                                            <"}" text="}" />
                                                                                        </compound_statement>
                                                                                        <else_clause>
                                                                                            <else text="else" />
                                                                                            <if_statement>
                                                                                                <if text="if" />
                                                                                                <parenthesized_expression>
                                                                                                    <"(" text="(" />
                                                                                                    <call_expression>
                                                                                                        <identifier text="match" />
                                                                                                        <argument_list>
                                                                                                            <"(" text="(" />
                                                                                                            <pointer_expression>
                                                                                                                <"&" text="&" />
                                                                                                                <identifier text="s" />
                                                                                                            </pointer_expression>
                                                                                                            <"," text="," />
                                                                                                            <string_literal>
                                                                                                                <"\"" text="\"" />
                                                                                                                <string_content text="%hfa24" />
                                                                                                                <"\"" text="\"" />
                                                                                                            </string_literal>
                                                                                                            <")" text=")" />
                                                                                                        </argument_list>
                                                                                                    </call_expression>
                                                                                                    <")" text=")" />
                                                                                                </parenthesized_expression>
                                                                                                <compound_statement>
                                                                                                    <"{" text="{" />
                                                                                                    <declaration>
                                                                                                        <struct_specifier>
                                                                                                            <struct text="struct" />
                                                                                                            <type_identifier text="hfa24" />
                                                                                                        </struct_specifier>
                                                                                                        <init_declarator>
                                                                                                            <identifier text="x" />
                                                                                                            <"=" text="=" />
                                                                                                            <call_expression>
                                                                                                                <identifier text="va_arg" />
                                                                                                                <argument_list>
                                                                                                                    <"(" text="(" />
                                                                                                                    <identifier text="ap" />
                                                                                                                    <"," text="," />
                                                                                                                    <identifier text="struct" />
                                                                                                                    <ERROR>
                                                                                                                        <identifier text="hfa24" />
                                                                                                                    </ERROR>
                                                                                                                    <")" text=")" />
                                                                                                                </argument_list>
                                                                                                            </call_expression>
                                                                                                        </init_declarator>
                                                                                                        <";" text=";" />
                                                                                                    </declaration>
                                                                                                    <expression_statement>
                                                                                                        <call_expression>
                                                                                                            <identifier text="printf" />
                                                                                                            <argument_list>
                                                                                                                <"(" text="(" />
                                                                                                                <string_literal>
                                                                                                                    <"\"" text="\"" />
                                                                                                                    <string_content text="%.1f,%.1f" />
                                                                                                                    <"\"" text="\"" />
                                                                                                                </string_literal>
                                                                                                                <"," text="," />
                                                                                                                <field_expression>
                                                                                                                    <identifier text="x" />
                                                                                                                    <"." text="." />
                                                                                                                    <field_identifier text="a" />
                                                                                                                </field_expression>
                                                                                                                <"," text="," />
                                                                                                                <field_expression>
                                                                                                                    <identifier text="x" />
                                                                                                                    <"." text="." />
                                                                                                                    <field_identifier text="d" />
                                                                                                                </field_expression>
                                                                                                                <")" text=")" />
                                                                                                            </argument_list>
                                                                                                        </call_expression>
                                                                                                        <";" text=";" />
                                                                                                    </expression_statement>
                                                                                                    <"}" text="}" />
                                                                                                </compound_statement>
                                                                                                <else_clause>
                                                                                                    <else text="else" />
                                                                                                    <if_statement>
                                                                                                        <if text="if" />
                                                                                                        <parenthesized_expression>
                                                                                                            <"(" text="(" />
                                                                                                            <call_expression>
                                                                                                                <identifier text="match" />
                                                                                                                <argument_list>
                                                                                                                    <"(" text="(" />
                                                                                                                    <pointer_expression>
                                                                                                                        <"&" text="&" />
                                                                                                                        <identifier text="s" />
                                                                                                                    </pointer_expression>
                                                                                                                    <"," text="," />
                                                                                                                    <string_literal>
                                                                                                                        <"\"" text="\"" />
                                                                                                                        <string_content text="%hfa31" />
                                                                                                                        <"\"" text="\"" />
                                                                                                                    </string_literal>
                                                                                                                    <")" text=")" />
                                                                                                                </argument_list>
                                                                                                            </call_expression>
                                                                                                            <")" text=")" />
                                                                                                        </parenthesized_expression>
                                                                                                        <compound_statement>
                                                                                                            <"{" text="{" />
                                                                                                            <declaration>
                                                                                                                <struct_specifier>
                                                                                                                    <struct text="struct" />
                                                                                                                    <type_identifier text="hfa31" />
                                                                                                                </struct_specifier>
                                                                                                                <init_declarator>
                                                                                                                    <identifier text="x" />
                                                                                                                    <"=" text="=" />
                                                                                                                    <call_expression>
                                                                                                                        <identifier text="va_arg" />
                                                                                                                        <argument_list>
                                                                                                                            <"(" text="(" />
                                                                                                                            <identifier text="ap" />
                                                                                                                            <"," text="," />
                                                                                                                            <identifier text="struct" />
                                                                                                                            <ERROR>
                                                                                                                                <identifier text="hfa31" />
                                                                                                                            </ERROR>
                                                                                                                            <")" text=")" />
                                                                                                                        </argument_list>
                                                                                                                    </call_expression>
                                                                                                                </init_declarator>
                                                                                                                <";" text=";" />
                                                                                                            </declaration>
                                                                                                            <expression_statement>
                                                                                                                <call_expression>
                                                                                                                    <identifier text="printf" />
                                                                                                                    <argument_list>
                                                                                                                        <"(" text="(" />
                                                                                                                        <string_literal>
                                                                                                                            <"\"" text="\"" />
                                                                                                                            <string_content text="%.1Lf,%.1Lf" />
                                                                                                                            <"\"" text="\"" />
                                                                                                                        </string_literal>
                                                                                                                        <"," text="," />
                                                                                                                        <field_expression>
                                                                                                                            <identifier text="x" />
                                                                                                                            <"." text="." />
                                                                                                                            <field_identifier text="a" />
                                                                                                                        </field_expression>
                                                                                                                        <"," text="," />
                                                                                                                        <field_expression>
                                                                                                                            <identifier text="x" />
                                                                                                                            <"." text="." />
                                                                                                                            <field_identifier text="a" />
                                                                                                                        </field_expression>
                                                                                                                        <")" text=")" />
                                                                                                                    </argument_list>
                                                                                                                </call_expression>
                                                                                                                <";" text=";" />
                                                                                                            </expression_statement>
                                                                                                            <"}" text="}" />
                                                                                                        </compound_statement>
                                                                                                        <else_clause>
                                                                                                            <else text="else" />
                                                                                                            <if_statement>
                                                                                                                <if text="if" />
                                                                                                                <parenthesized_expression>
                                                                                                                    <"(" text="(" />
                                                                                                                    <call_expression>
                                                                                                                        <identifier text="match" />
                                                                                                                        <argument_list>
                                                                                                                            <"(" text="(" />
                                                                                                                            <pointer_expression>
                                                                                                                                <"&" text="&" />
                                                                                                                                <identifier text="s" />
                                                                                                                            </pointer_expression>
                                                                                                                            <"," text="," />
                                                                                                                            <string_literal>
                                                                                                                                <"\"" text="\"" />
                                                                                                                                <string_content text="%hfa32" />
                                                                                                                                <"\"" text="\"" />
                                                                                                                            </string_literal>
                                                                                                                            <")" text=")" />
                                                                                                                        </argument_list>
                                                                                                                    </call_expression>
                                                                                                                    <")" text=")" />
                                                                                                                </parenthesized_expression>
                                                                                                                <compound_statement>
                                                                                                                    <"{" text="{" />
                                                                                                                    <declaration>
                                                                                                                        <struct_specifier>
                                                                                                                            <struct text="struct" />
                                                                                                                            <type_identifier text="hfa32" />
                                                                                                                        </struct_specifier>
                                                                                                                        <init_declarator>
                                                                                                                            <identifier text="x" />
                                                                                                                            <"=" text="=" />
                                                                                                                            <call_expression>
                                                                                                                                <identifier text="va_arg" />
                                                                                                                                <argument_list>
                                                                                                                                    <"(" text="(" />
                                                                                                                                    <identifier text="ap" />
                                                                                                                                    <"," text="," />
                                                                                                                                    <identifier text="struct" />
                                                                                                                                    <ERROR>
                                                                                                                                        <identifier text="hfa32" />
                                                                                                                                    </ERROR>
                                                                                                                                    <")" text=")" />
                                                                                                                                </argument_list>
                                                                                                                            </call_expression>
                                                                                                                        </init_declarator>
                                                                                                                        <";" text=";" />
                                                                                                                    </declaration>
                                                                                                                    <expression_statement>
                                                                                                                        <call_expression>
                                                                                                                            <identifier text="printf" />
                                                                                                                            <argument_list>
                                                                                                                                <"(" text="(" />
                                                                                                                                <string_literal>
                                                                                                                                    <"\"" text="\"" />
                                                                                                                                    <string_content text="%.1Lf,%.1Lf" />
                                                                                                                                    <"\"" text="\"" />
                                                                                                                                </string_literal>
                                                                                                                                <"," text="," />
                                                                                                                                <field_expression>
                                                                                                                                    <identifier text="x" />
                                                                                                                                    <"." text="." />
                                                                                                                                    <field_identifier text="a" />
                                                                                                                                </field_expression>
                                                                                                                                <"," text="," />
                                                                                                                                <field_expression>
                                                                                                                                    <identifier text="x" />
                                                                                                                                    <"." text="." />
                                                                                                                                    <field_identifier text="b" />
                                                                                                                                </field_expression>
                                                                                                                                <")" text=")" />
                                                                                                                            </argument_list>
                                                                                                                        </call_expression>
                                                                                                                        <";" text=";" />
                                                                                                                    </expression_statement>
                                                                                                                    <"}" text="}" />
                                                                                                                </compound_statement>
                                                                                                                <else_clause>
                                                                                                                    <else text="else" />
                                                                                                                    <if_statement>
                                                                                                                        <if text="if" />
                                                                                                                        <parenthesized_expression>
                                                                                                                            <"(" text="(" />
                                                                                                                            <call_expression>
                                                                                                                                <identifier text="match" />
                                                                                                                                <argument_list>
                                                                                                                                    <"(" text="(" />
                                                                                                                                    <pointer_expression>
                                                                                                                                        <"&" text="&" />
                                                                                                                                        <identifier text="s" />
                                                                                                                                    </pointer_expression>
                                                                                                                                    <"," text="," />
                                                                                                                                    <string_literal>
                                                                                                                                        <"\"" text="\"" />
                                                                                                                                        <string_content text="%hfa33" />
                                                                                                                                        <"\"" text="\"" />
                                                                                                                                    </string_literal>
                                                                                                                                    <")" text=")" />
                                                                                                                                </argument_list>
                                                                                                                            </call_expression>
                                                                                                                            <")" text=")" />
                                                                                                                        </parenthesized_expression>
                                                                                                                        <compound_statement>
                                                                                                                            <"{" text="{" />
                                                                                                                            <declaration>
                                                                                                                                <struct_specifier>
                                                                                                                                    <struct text="struct" />
                                                                                                                                    <type_identifier text="hfa33" />
                                                                                                                                </struct_specifier>
                                                                                                                                <init_declarator>
                                                                                                                                    <identifier text="x" />
                                                                                                                                    <"=" text="=" />
                                                                                                                                    <call_expression>
                                                                                                                                        <identifier text="va_arg" />
                                                                                                                                        <argument_list>
                                                                                                                                            <"(" text="(" />
                                                                                                                                            <identifier text="ap" />
                                                                                                                                            <"," text="," />
                                                                                                                                            <identifier text="struct" />
                                                                                                                                            <ERROR>
                                                                                                                                                <identifier text="hfa33" />
                                                                                                                                            </ERROR>
                                                                                                                                            <")" text=")" />
                                                                                                                                        </argument_list>
                                                                                                                                    </call_expression>
                                                                                                                                </init_declarator>
                                                                                                                                <";" text=";" />
                                                                                                                            </declaration>
                                                                                                                            <expression_statement>
                                                                                                                                <call_expression>
                                                                                                                                    <identifier text="printf" />
                                                                                                                                    <argument_list>
                                                                                                                                        <"(" text="(" />
                                                                                                                                        <string_literal>
                                                                                                                                            <"\"" text="\"" />
                                                                                                                                            <string_content text="%.1Lf,%.1Lf" />
                                                                                                                                            <"\"" text="\"" />
                                                                                                                                        </string_literal>
                                                                                                                                        <"," text="," />
                                                                                                                                        <field_expression>
                                                                                                                                            <identifier text="x" />
                                                                                                                                            <"." text="." />
                                                                                                                                            <field_identifier text="a" />
                                                                                                                                        </field_expression>
                                                                                                                                        <"," text="," />
                                                                                                                                        <field_expression>
                                                                                                                                            <identifier text="x" />
                                                                                                                                            <"." text="." />
                                                                                                                                            <field_identifier text="c" />
                                                                                                                                        </field_expression>
                                                                                                                                        <")" text=")" />
                                                                                                                                    </argument_list>
                                                                                                                                </call_expression>
                                                                                                                                <";" text=";" />
                                                                                                                            </expression_statement>
                                                                                                                            <"}" text="}" />
                                                                                                                        </compound_statement>
                                                                                                                        <else_clause>
                                                                                                                            <else text="else" />
                                                                                                                            <if_statement>
                                                                                                                                <if text="if" />
                                                                                                                                <parenthesized_expression>
                                                                                                                                    <"(" text="(" />
                                                                                                                                    <call_expression>
                                                                                                                                        <identifier text="match" />
                                                                                                                                        <argument_list>
                                                                                                                                            <"(" text="(" />
                                                                                                                                            <pointer_expression>
                                                                                                                                                <"&" text="&" />
                                                                                                                                                <identifier text="s" />
                                                                                                                                            </pointer_expression>
                                                                                                                                            <"," text="," />
                                                                                                                                            <string_literal>
                                                                                                                                                <"\"" text="\"" />
                                                                                                                                                <string_content text="%hfa34" />
                                                                                                                                                <"\"" text="\"" />
                                                                                                                                            </string_literal>
                                                                                                                                            <")" text=")" />
                                                                                                                                        </argument_list>
                                                                                                                                    </call_expression>
                                                                                                                                    <")" text=")" />
                                                                                                                                </parenthesized_expression>
                                                                                                                                <compound_statement>
                                                                                                                                    <"{" text="{" />
                                                                                                                                    <declaration>
                                                                                                                                        <struct_specifier>
                                                                                                                                            <struct text="struct" />
                                                                                                                                            <type_identifier text="hfa34" />
                                                                                                                                        </struct_specifier>
                                                                                                                                        <init_declarator>
                                                                                                                                            <identifier text="x" />
                                                                                                                                            <"=" text="=" />
                                                                                                                                            <call_expression>
                                                                                                                                                <identifier text="va_arg" />
                                                                                                                                                <argument_list>
                                                                                                                                                    <"(" text="(" />
                                                                                                                                                    <identifier text="ap" />
                                                                                                                                                    <"," text="," />
                                                                                                                                                    <identifier text="struct" />
                                                                                                                                                    <ERROR>
                                                                                                                                                        <identifier text="hfa34" />
                                                                                                                                                    </ERROR>
                                                                                                                                                    <")" text=")" />
                                                                                                                                                </argument_list>
                                                                                                                                            </call_expression>
                                                                                                                                        </init_declarator>
                                                                                                                                        <";" text=";" />
                                                                                                                                    </declaration>
                                                                                                                                    <expression_statement>
                                                                                                                                        <call_expression>
                                                                                                                                            <identifier text="printf" />
                                                                                                                                            <argument_list>
                                                                                                                                                <"(" text="(" />
                                                                                                                                                <string_literal>
                                                                                                                                                    <"\"" text="\"" />
                                                                                                                                                    <string_content text="%.1Lf,%.1Lf" />
                                                                                                                                                    <"\"" text="\"" />
                                                                                                                                                </string_literal>
                                                                                                                                                <"," text="," />
                                                                                                                                                <field_expression>
                                                                                                                                                    <identifier text="x" />
                                                                                                                                                    <"." text="." />
                                                                                                                                                    <field_identifier text="a" />
                                                                                                                                                </field_expression>
                                                                                                                                                <"," text="," />
                                                                                                                                                <field_expression>
                                                                                                                                                    <identifier text="x" />
                                                                                                                                                    <"." text="." />
                                                                                                                                                    <field_identifier text="d" />
                                                                                                                                                </field_expression>
                                                                                                                                                <")" text=")" />
                                                                                                                                            </argument_list>
                                                                                                                                        </call_expression>
                                                                                                                                        <";" text=";" />
                                                                                                                                    </expression_statement>
                                                                                                                                    <"}" text="}" />
                                                                                                                                </compound_statement>
                                                                                                                                <else_clause>
                                                                                                                                    <else text="else" />
                                                                                                                                    <expression_statement>
                                                                                                                                        <call_expression>
                                                                                                                                            <identifier text="putchar" />
                                                                                                                                            <argument_list>
                                                                                                                                                <"(" text="(" />
                                                                                                                                                <pointer_expression>
                                                                                                                                                    <"*" text="*" />
                                                                                                                                                    <identifier text="s" />
                                                                                                                                                </pointer_expression>
                                                                                                                                                <")" text=")" />
                                                                                                                                            </argument_list>
                                                                                                                                        </call_expression>
                                                                                                                                        <";" text=";" />
                                                                                                                                    </expression_statement>
                                                                                                                                </else_clause>
                                                                                                                            </if_statement>
                                                                                                                        </else_clause>
                                                                                                                    </if_statement>
                                                                                                                </else_clause>
                                                                                                            </if_statement>
                                                                                                        </else_clause>
                                                                                                    </if_statement>
                                                                                                </else_clause>
                                                                                            </if_statement>
                                                                                        </else_clause>
                                                                                    </if_statement>
                                                                                </else_clause>
                                                                            </if_statement>
                                                                        </else_clause>
                                                                    </if_statement>
                                                                </else_clause>
                                                            </if_statement>
                                                        </else_clause>
                                                    </if_statement>
                                                </else_clause>
                                            </if_statement>
                                        </else_clause>
                                    </if_statement>
                                </else_clause>
                            </if_statement>
                        </else_clause>
                    </if_statement>
                    <"}" text="}" />
                </compound_statement>
            </for_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="putchar" />
                    <argument_list>
                        <"(" text="(" />
                        <char_literal>
                            <"'" text="'" />
                            <escape_sequence text="\\n" />
                            <"'" text="'" />
                        </char_literal>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="stdarg" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="stdarg:" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%9s %9s %9s %9s %9s %9s" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s9" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%7s %9s %9s %9s %9s %9s" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="s7" />
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s9" />
                        <"," text="," />
                        <identifier text="s9" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="HFA long double:" />
                            <"\"" text="\"" />
                        </string_literal>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa34 %hfa34 %hfa34 %hfa34" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa33 %hfa34 %hfa34 %hfa34" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa32 %hfa34 %hfa34 %hfa34" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa32" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa31 %hfa34 %hfa34 %hfa34" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa31" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa34" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa32 %hfa33 %hfa33 %hfa33 %hfa33" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa32" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa31 %hfa33 %hfa33 %hfa33 %hfa33" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa31" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa33 %hfa33 %hfa33 %hfa33" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa33" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa34 %hfa32 %hfa32 %hfa32 %hfa32" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa33 %hfa32 %hfa32 %hfa32 %hfa32" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa33" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa34 %hfa32 %hfa31 %hfa31 %hfa31 %hfa31" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa34" />
                        <"," text="," />
                        <identifier text="hfa32" />
                        <"," text="," />
                        <identifier text="hfa31" />
                        <"," text="," />
                        <identifier text="hfa31" />
                        <"," text="," />
                        <identifier text="hfa31" />
                        <"," text="," />
                        <identifier text="hfa31" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="HFA double:" />
                            <"\"" text="\"" />
                        </string_literal>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa24 %hfa24 %hfa24 %hfa24" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa23 %hfa24 %hfa24 %hfa24" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa22 %hfa24 %hfa24 %hfa24" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa22" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa21 %hfa24 %hfa24 %hfa24" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa21" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa24" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa22 %hfa23 %hfa23 %hfa23 %hfa23" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa22" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa21 %hfa23 %hfa23 %hfa23 %hfa23" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa21" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa23 %hfa23 %hfa23 %hfa23" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa23" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa24 %hfa22 %hfa22 %hfa22 %hfa22" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa22" />
                        <"," text="," />
                        <identifier text="hfa22" />
                        <"," text="," />
                        <identifier text="hfa22" />
                        <"," text="," />
                        <identifier text="hfa22" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa23 %hfa22 %hfa22 %hfa22 %hfa22" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa23" />
                        <"," text="," />
                        <identifier text="hfa22" />
                        <"," text="," />
                        <identifier text="hfa22" />
                        <"," text="," />
                        <identifier text="hfa22" />
                        <"," text="," />
                        <identifier text="hfa22" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa24 %hfa22 %hfa21 %hfa21 %hfa21 %hfa21" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa24" />
                        <"," text="," />
                        <identifier text="hfa22" />
                        <"," text="," />
                        <identifier text="hfa21" />
                        <"," text="," />
                        <identifier text="hfa21" />
                        <"," text="," />
                        <identifier text="hfa21" />
                        <"," text="," />
                        <identifier text="hfa21" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="HFA float:" />
                            <"\"" text="\"" />
                        </string_literal>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa14 %hfa14 %hfa14 %hfa14" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa13 %hfa14 %hfa14 %hfa14" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa12 %hfa14 %hfa14 %hfa14" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa12" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa11 %hfa14 %hfa14 %hfa14" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa11" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa14" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa12 %hfa13 %hfa13 %hfa13 %hfa13" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa12" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa11 %hfa13 %hfa13 %hfa13 %hfa13" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa11" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa13 %hfa13 %hfa13 %hfa13" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa13" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa14 %hfa12 %hfa12 %hfa12 %hfa12" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa12" />
                        <"," text="," />
                        <identifier text="hfa12" />
                        <"," text="," />
                        <identifier text="hfa12" />
                        <"," text="," />
                        <identifier text="hfa12" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa13 %hfa12 %hfa12 %hfa12 %hfa12" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa13" />
                        <"," text="," />
                        <identifier text="hfa12" />
                        <"," text="," />
                        <identifier text="hfa12" />
                        <"," text="," />
                        <identifier text="hfa12" />
                        <"," text="," />
                        <identifier text="hfa12" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="myprintf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%hfa14 %hfa12 %hfa11 %hfa11 %hfa11 %hfa11" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="hfa14" />
                        <"," text="," />
                        <identifier text="hfa12" />
                        <"," text="," />
                        <identifier text="hfa11" />
                        <"," text="," />
                        <identifier text="hfa11" />
                        <"," text="," />
                        <identifier text="hfa11" />
                        <"," text="," />
                        <identifier text="hfa11" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="pll" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <sized_type_specifier>
                        <unsigned text="unsigned" />
                        <long text="long" />
                        <long text="long" />
                    </sized_type_specifier>
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="%llx" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <"," text="," />
                        <identifier text="x" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="movi" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="printf" />
                    <argument_list>
                        <"(" text="(" />
                        <string_literal>
                            <"\"" text="\"" />
                            <string_content text="MOVI:" />
                            <escape_sequence text="\\n" />
                            <"\"" text="\"" />
                        </string_literal>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd0000" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd00000000" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd000000000000" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xffffabcd" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcdffff" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xffffffffffffabcd" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xffffffffabcdffff" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xffffabcdffffffff" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcdffffffffffff" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xaaaaaaaa" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0x5555555555555555" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0x77777777" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0x3333333333333333" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xf8f8f8f8" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0x1e1e1e1e1e1e1e1e" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0x3f803f80" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0x01ff01ff01ff01ff" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0x007fffc0" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0x03fff80003fff800" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0x0007fffffffffe00" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd1234" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd00001234" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd000000001234" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd12340000" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd000012340000" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd123400000000" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xffffffffabcd1234" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xffffabcdffff1234" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcdffffffff1234" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xffffabcd1234ffff" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcdffff1234ffff" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcd1234ffffffff" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xffffef0123456789" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcdef012345ffff" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <number_literal text="0xabcdef0123456789" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="addip0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"+" text="+" />
                    <number_literal text="0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="sublp0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"-" text="-" />
                    <number_literal text="0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="addip123" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"+" text="+" />
                    <number_literal text="123" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="addlm123" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"+" text="+" />
                    <number_literal text="-123" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="sublp4095" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"-" text="-" />
                    <number_literal text="4095" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="subim503808" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"-" text="-" />
                    <number_literal text="-503808" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="addp12345" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"+" text="+" />
                    <number_literal text="12345" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="subp12345" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"-" text="-" />
                    <number_literal text="12345" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="mvni" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <number_literal text="0xffffffff" />
                    <"-" text="-" />
                    <identifier text="x" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="negl" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <number_literal text="0" />
                    <"-" text="-" />
                    <identifier text="x" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="rsbi123" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <number_literal text="123" />
                    <"-" text="-" />
                    <identifier text="x" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="rsbl123" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <number_literal text="123" />
                    <"-" text="-" />
                    <identifier text="x" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="andi0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"&" text="&" />
                    <number_literal text="0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="andlm1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"&" text="&" />
                    <number_literal text="-1" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="orrl0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"|" text="|" />
                    <number_literal text="0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="orrim1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"|" text="|" />
                    <number_literal text="-1" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="eori0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"^" text="^" />
                    <number_literal text="0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="eorlm1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"^" text="^" />
                    <number_literal text="-1" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="and0xf0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"&" text="&" />
                    <number_literal text="0xf0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="orr0xf0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"|" text="|" />
                    <number_literal text="0xf0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="eor0xf0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"^" text="^" />
                    <number_literal text="0xf0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="lsli0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"<<" text="<<" />
                    <number_literal text="0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="lsri0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="int64_t" />
        <function_declarator>
            <identifier text="asrl0" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="int64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="0" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="lsli1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"<<" text="<<" />
                    <number_literal text="1" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="lsli31" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"<<" text="<<" />
                    <number_literal text="31" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="lsll1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"<<" text="<<" />
                    <number_literal text="1" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="lsll63" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <"<<" text="<<" />
                    <number_literal text="63" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="lsri1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="1" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint32_t" />
        <function_declarator>
            <identifier text="lsri31" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="31" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="lsrl1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="1" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="uint64_t" />
        <function_declarator>
            <identifier text="lsrl63" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="uint64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="63" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="int32_t" />
        <function_declarator>
            <identifier text="asri1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="int32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="1" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="int32_t" />
        <function_declarator>
            <identifier text="asri31" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="int32_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="31" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="int64_t" />
        <function_declarator>
            <identifier text="asrl1" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="int64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="1" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <storage_class_specifier>
            <static text="static" />
        </storage_class_specifier>
        <primitive_type text="int64_t" />
        <function_declarator>
            <identifier text="asrl63" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="int64_t" />
                    <identifier text="x" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <return_statement>
                <return text="return" />
                <binary_expression>
                    <identifier text="x" />
                    <">>" text=">>" />
                    <number_literal text="63" />
                </binary_expression>
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="opi" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <declaration>
                <primitive_type text="int" />
                <init_declarator>
                    <identifier text="x" />
                    <"=" text="=" />
                    <number_literal text="1000" />
                </init_declarator>
                <";" text=";" />
            </declaration>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="addip0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="sublp0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="addip123" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="addlm123" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="sublp4095" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="subim503808" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="addp12345" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="subp12345" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="mvni" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="negl" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="rsbi123" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="rsbl123" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="andi0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="andlm1" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="orrl0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="orrim1" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="eori0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="eorlm1" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="and0xf0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="orr0xf0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="eor0xf0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsli0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsri0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="asrl0" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsli1" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsli31" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsll1" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsll63" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsri1" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsri31" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsrl1" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="lsrl63" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="asri1" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="asri31" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="asrl1" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="pll" />
                    <argument_list>
                        <"(" text="(" />
                        <call_expression>
                            <identifier text="asrl63" />
                            <argument_list>
                                <"(" text="(" />
                                <identifier text="x" />
                                <")" text=")" />
                            </argument_list>
                        </call_expression>
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="void" />
        <function_declarator>
            <identifier text="pcs" />
            <parameter_list>
                <"(" text="(" />
                <parameter_declaration>
                    <primitive_type text="void" />
                </parameter_declaration>
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="arg" />
                    <argument_list>
                        <"(" text="(" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="ret" />
                    <argument_list>
                        <"(" text="(" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="stdarg" />
                    <argument_list>
                        <"(" text="(" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="movi" />
                    <argument_list>
                        <"(" text="(" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <expression_statement>
                <call_expression>
                    <identifier text="opi" />
                    <argument_list>
                        <"(" text="(" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
    <function_definition>
        <primitive_type text="int" />
        <function_declarator>
            <identifier text="main" />
            <parameter_list>
                <"(" text="(" />
                <")" text=")" />
            </parameter_list>
        </function_declarator>
        <compound_statement>
            <"{" text="{" />
            <expression_statement>
                <call_expression>
                    <identifier text="pcs" />
                    <argument_list>
                        <"(" text="(" />
                        <")" text=")" />
                    </argument_list>
                </call_expression>
                <";" text=";" />
            </expression_statement>
            <return_statement>
                <return text="return" />
                <number_literal text="0" />
                <";" text=";" />
            </return_statement>
            <"}" text="}" />
        </compound_statement>
    </function_definition>
</translation_unit>
